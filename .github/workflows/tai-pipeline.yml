# .github/workflows/tai-pipeline.yml
name: Talk About It Pipeline

permissions: 
  contents: read
  packages: write

on:
  push:
    paths:
      - 'apps/**'
      - 'libs/**'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'apps/**'
      - 'libs/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build-api:
    runs-on: ubuntu-latest
    name: Build API Server
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      - name: Build API
        run: dotnet build ./apps/api-server/ApiServer

  build-web:
    runs-on: ubuntu-latest
    name: Build Web Client
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install Web Client Deps
        run: npm install --prefix ./apps/web-client
      - name: Build Web Client
        run: npm run build --prefix ./apps/web-client
  
  docker-build:
    env:
      REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }}
      API_IMAGE: tai-api-service
      WEB_IMAGE: tai-web-client
      TAG: latest  # change to 'ci' or '${{ github.sha }}' as needed
    runs-on: ubuntu-latest
    name: Build Docker Image
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ github.repository_owner }}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and Push API Server Docker Image
        run: | 
          docker build -t $REGISTRY/$OWNER/$API_IMAGE:$TAG ./apps/api-server/ApiServer
          docker push $REGISTRY/$OWNER/$API_IMAGE:$TAG

      - name: Build And Push Web Client Docker Image
        run: |
          docker build -t $REGISTRY/$OWNER/WEB_IMAGE:$TAG ./apps/web-client
          docker push $REGISTRY/$OWNER/$WEB_IMAGE:$TAG
  
  docker-compose-test:
    runs-on: ubuntu-latest
    name: Run Docker Compose Services (Test Infra)
    services:
      postgre:
        image: postgres
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: debate
        ports:
          - "5432:5432"
      
      redis:
        image: redis
        ports: 
          - "6379:6379"

    steps:
      - uses: actions/checkout@v3

      - name: Run Docker Compose (Build & Up)
        run: docker compose up --build -d

      - name: Wait for Services (Simple Sleep or Health Check)
        run: sleep 10

      - name: Run Integration Tests (optional)
        run: |
          echo "Run API Tests here or add curl checks"
          curl -f http://localhost:5000/health || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Docker Compose Down
        run: docker compose down